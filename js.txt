//Convert_type_value
แปลง String เป็นตัวเลขใช้ Number('16') / แปลงตัวเลขเป็นสตริง String(16)

//Function
1. function getpyramid() { (*getpyramid คือชื่อฟังก์ชัน)
    (ข้อมูลภายในฟังก์ชัน เช่น)
    lenght = 1
    width = 2
    basearea = lenght * width
    pyramidvolume = 1/3 * basearea * height
}
getpyramid(); (*เรียกใช้ฟังก์ชัน)
---------------------------------------
2. function getpyramid(lenght , width) { (*ใช้ parameter มากำหนดข้อมูลการใช้ฟังก์ชัน)
    basearea = lenght * width
    pyramidvolume = 1/3 * basearea * height
}
getpyramid(1,2);
---------------------------------------
3. function getpyramid(lenght , width) { (*ใช้ parameter มากำหนดข้อมูลการใช้ฟังก์ชัน)
    basearea = lenght * width
    pyramidvolume = 1/3 * basearea * height
    return pyramidvolume; (*จะคืนค่าที่คำนวณในฟังก์ชันไปที่ getpyramid)
}
let area1 = getpyramid(1,2); (*ต้องประกาศตัวแปรเพื่อรับค่าที่ return มาไปใช้ต่อ)
console.log(area1);
---------------------------------------
4. let getpyramid = //() => { (*ส่วนที่ // คือการสร้าง arrow function )
    console.log('Hi')
}
calculate.addEventListener('click', () =>{
    console.log('eiei')
});
*มีประโยชน์ตอนเรียกใช้ function หลายๆตัวสามารถย่อโดยไม่ต้องประกาศ function ก่อนเรียกใช้ได้
---------------------------------------

//Array
เป็นชนิดข้อมูลหลายข้อมูลเก็บมาเป็นกลุ่มเดียวกัน เช่น let A = ['apple','banana','mango']; console.log(A[0]) = apple
การเปลี่ยนค่า A[1]='watermelon'
- A.push('watermelon'); : เพิ่มค่าข้อมูลเข้าไปใน Array ตัวสุดท้าย
    A.pop(); : ลบข้อมูลตัวสุดท้ายใน Array
- splice(ตำแหน่ง , จำนวนที่จะลบ , ข้อมูลที่จะใส่เพิ่ม) : เพื่อเพิ่มข้อมูล(ต้องใส่ตัวจำนวนที่จะลบเป็น 0)
    splice(ตำแหน่ง , จำนวนที่จะลบ) : เพื่อลบข้อมูล
    console.log(A.lenght) = 3 : เป็นการนับจำนวนข้อมูลใน Array
        //For Each (คำสั่งเฉพาะวน Array)
        scores = [82,75,48,64,36]; / i = 0;
        scores.foreach((score,(*index สามารถใช้ร่วมกับค่า index ได้จะนับจำนวนตัวใน Array ให้)) =>{ (*เป็นการถีบส่งหรือวนค่าของ Array เพื่อไปทำงานใน function ที่เรากำหนด)
            if (score >= 50)
                i++;
        })
- Map : let scores = [82,75,48,64,36]; / pass = scores.map((scoreja)=>{ (*เหมือน foreach ใช้รับค่าเมื่อ map ส่งมา **จะใช้ตัวแปร scoreja เช็คเงื่อนไขเพราะในฟังก์ชันนี้จะวนค่าใน Array ไปเรื่อยๆ)
- Filter : ใช้ function เหมือนกันจะ return เป็น true กับ false เท่านั้น (console.log ตัวแปรมันเอง)
- Reduce : ใช้ function เหมือนกันแต่จะมี parameter 2 ตัวโดย (sum , score) จะ return เป็นผลรวมของ Array
- Find : ค้นหาข้อมูลที่เรากำหนด ใช้ function เหมือนกัน (ตัวแปร Array) และกำหนดเงื่อนไขว่าให้เช็คอะไร หาเจอตัวแรกจะหยุดการทำงานทันที
- Findindex : จะคืนค่าเป็น index เขียนเหมือน Find
- every : ถ้าข้อมูลทุกตัวเป็น true จะ return true ถ้ามีตัวใดตัวนึงเป็น false จะคืน false
- some : ถ้าข้อมูลบางตัวเป็น true จะ return true ถ้าทุกตัวเป็น false จะคืน false

*[] = Array , {} = Object

//Object 
let rabbit = {
    name : 'Mini' (*ต่างกับ Array คือเวลาเรียกใช้ข้อมูลภายใน Object คือ rabbit.name;)
    talk(){ *Method : talk(){ (*เพิ่ม method ภายใน Object)
        console.log(this.name + 'eiei') (*เรียกค่า Object ที่อยู่ในตัวเดียวกันกับ method ออกมาใช้งาน)
    }
}
rabbit.name = 'plug' *เปลี่ยน value ด้านใน Object
*ถ้าใช้งาน Array ร่วม : ใส่ [] ครอบและภายในจะมี Object อยู่ภายใน
rabbit.talk(); (*เรียกใช้ method ภายใน Object)
- Constructor function : function ที่ใช้สร้าง Object
    function Rabbit(name , color , weight){ (*ใส่ parameter ใน function)
        this.name (ข้อมูลที่สร้างให้ Rabbit) = name;
        this.color (ข้อมูลที่สร้างให้ Rabbit) = color;
        this.weight (ข้อมูลที่สร้างให้ Rabbit) = weight;
        this.talk = function(){ (*สร้าง Method)
            console.log(this.name + 'eiei')
        }
    }
    let rabbit1 = new Rabbit('Mini' , 'White' , '1.5') (*ใช้รับ Object ใหม่ที่ถูกสร้างขึ้น)
*new มารับค่า this

// var let const
Global scope = ประกาศตัวแปรนอก {}
Block scope = ประกาศตัวแปรใน {}
let = ตัวแปรปกติ สามารถเปลี่ยนค่าได้ (ไม่หลุด Block scope)
const = ตัวแปรเก็บค่าคงที่ ไม่สามารถเปลี่ยนค่าได้ (ไม่หลุด Block scope)
var = ตัวแปรที่หลุดออกจาก block scope และเปลี่ยนค่าได้ (เป็นการสร้างตัวแปรแบบเก่า)

// settimeout
- settimeout : settimeout(() => { (*จะทำงานต่อเมื่อครบเวลาที่ตั้งไว้ ซึ่งโค้ดจะรันตัวอื่นก่อน function นี้)
    เงื่อนไขที่จะให้ใส่ Delay 
}, 3000) *เวลาเป็นหน่วย millisec 
-setinterval : setinterval(() => { (*จะทำงาน Delay วนเรื่อยๆไม่มีจุดสิ้นสุด)
    เงื่อนไขที่จะให้ใส่ Delay 
}, 3000)
- clearinterval(ตัวแปรที่สร้างรับเป็น 0); (*หยุดการทำงาน Delay)
- cleartimeout(ตัวแปรที่สร้างรับเป็น 0); (*หยุดการทำงาน Delay)

//Html+Js
File HTML : 
<script src="js_html.js"></script> : คำสั่งที่ใส่ใน body html เพื่อเรียกใช้ไฟล์ js *ใส่ตรงส่วนที่เราจะให้ js ควบคุม

File JS : 
let test = document.getElementById('ใส่ id ของ tag ที่เราต้องการ *id ต้องประกาศใน tag html ด้วย'); : เป็นการเรียกใช้ html เข้ามาใช้กับ js(document เป็นตัวแทนหน้าเว็บ html)
text = <b>eiei</b>
text += '<i>haha</i> (*ต่อท้าย text)
test.innerHTML = text; (*เป็นคำสั่งใช้งานบน html)
---------------------------------------
let discount = document.getElementById('discount-button');
let message = document.getElementById('message');
function showMessage(){ 
    message.innerHTML = 'ดู BOX ไปก่อน'; (*เป็นฟังก์ชันการแสดงข้อความ)
}
discount.addeventlistener('click',showMessage) (*เป็นคำสั่งใส่เหตุการณ์ที่เราจะจับมัน และใส่คำสั่งที่จะให้มันทำเมื่อเหตุการณ์เกิดขึ้น)
(*ใน showMessage ไม่ใส่ () เพราะไม่ต้องการให้มันทำงานเลยต้องการแค่แปะไว้ให้มันทำงานเมื่อปุ่มถูกกด)
---------------------------------------
//คำนวณสูตรคูณ
function print(){
    let number = Number(type.value); (*.value เป็นการดึงค่าจากช่อง type)
    let output = '';

    if(number == 0){
        display.innerHTML = 'เฮ้ออ'
        return (*return ถ้าใส่ในโค้ดอื่นๆที่ไม่ใช่ใน function โค้ดจะหยุดทำต่อทันทีเมื่อเจอ return)
    }
    for (let i =1 ; i<=12 ; i++){
        output += '<p>';
        output += number + ' x ' + i + ' = ' + (number*i);
        output += '</p>'
    }
    display.innerHTML = output;
}
calculate.addEventListener('click',print);
---------------------------------------
DOM Element(ใช้ JS ตกแต่งหน้า web page)
document เก็บชนิดข้อมูล Object - model โครงสร้าง html
- document.getElementById(ดึง id html มาปรับแต่งใน js) (*id อันนึงใช้ได้ครั้งเดียว)
- document.getElementByClassname(ดึง class html) (*class ใช้ได้หลายตัว (สำหรับดึงมาใช้หลายตัว))
*ใช้ for ได้ใน getElementByClassname
- document.queryselectorall(ดึง class html css เช่น '.message') (*class ใช้ได้หลายตัว (สำหรับดึงมาใช้หลายตัว))
*ใช้ for Each ได้ใน queryselectorall
- document.queryselector(ดึง class html css เช่น '.message3') (สำหรับดึงมาใช้ตัวเดียว)
**ถ้าอยากดึงเป็น id ('#message')
---------------------------------------
DOM Style (เปลี่ยน style css โดยใช้ js)
(ชื่อตัวแปรหลังจาก get หรือ query มา) 
massage.style.color = 'red';
message.style.backgroundColor(คำสั่งใน css ที่คั่นด้วย - คำที่ 2,3 จะขึ้นด้วยตัวใหญ่) = 'black';
message.style.fontSize = '20px'
Ex.Show/Hide เป็นการเปลี่ยน css
spoilbutton.addeventlistener('click',() =>{
    if (message.style.display === 'none'){
        message.style.display = 'block';
    }
    else{
        message.style.display = 'none';
    }
})
---------------------------------------
DOM Class (เปลี่ยน class โดยใช้ js)
*class เริ่มต้นชื่อ class="message" , ใน css เขียน class .messageorange-box รอไว้แล้ว
message.classList.add('orange-box'); (*เพิ่ม class)
message.classList.remove('orange-box'); (*ลบ class)
message.classList.replace('orange-box , 'green-box'); (*เปลี่ยน class)
document.body (*เป็นการเรียกใช้ body ใน html ได้เลย)
Ex.Change theme
spoilbutton.addeventlistener('click',() =>{
    body.classList.toggle('dark-theme'); (*เป็นการทำงานแบบ switch เปิด-ปิด)
})
---------------------------------------
DOM Mouse Event (จับเหตุการณ์ที่เกิดขึ้นจากการใช้เม้าส์บนหน้าเว็บ)
function changeimage() {
    bigimage.src(*ตอนแรกไม่มีรูป) = thumbnailimage.src; (*คือรูปภาพที่แสดงบนหน้าเว็บ) (*.src จาก tag html คือเหมือนเป็นการเอารูป thumbnailimage ไปใส่ในรูปใหญ่ bigimage)
}
spoilbutton.addeventlistener('click', changeimage);
spoilbutton.addeventlistener('mouseover', changeimage); (*เป็นการเลื่อนเม้าไปโดน)
Ex. Change image หลายรูป
function changeimage(event (*Object ที่เก็บข้อมูลต่างๆของเหตุการณ์ที่เกิดขึ้น)) {
    bigimage.src = event.target.src (*target วิธีเรียกใช้ thumnail แต่ละตัว)
}
thumbnailimage.foreach((thumnail)=> {
    thumnail.addEventListener('mouseover',changeimage)
    thumnail.addEventListener('mouseout',changeimage) (*ใช้คู่กับ 'mouseover' เพื่อเวลาเลื่อนเม้าออกจากรูปภาพใหญ่จะหาย)
})
---------------------------------------
DOM form event (จัดการกับ Form เพื่อส่งต่อไปใช้กับโค้ดฝั่ง Server)
function checkans(event){
    let toolong = false;
    answers.foreach((answer) => {
    if(answer.value.lenght > 20(* value ดึงข้อมูลข้อความ)){
        toolong = true;
    }
    });
    if(toolong){
        errormessage.style.display = 'block' (*errormessage = box ด้านล่างที่กำหนด)
        event.preventDefault(); (*preventDefault คำสั่งดักไม่ให้ Form ทำงานส่งไปยังฝั่ง Server ถ้าหากเข้าเงื่อนไขนี้)
    }
    else {
        errormessage.style.display = 'none'
    }
    }
}
answers.foreach(answer) => {
    answer.addEventListener('change' , checkans) (*change แก้ไขข้อมูล ใช้กับ html text-input ต้องหาทางกด , select , checkbox,radio *ต้องกดก่อนถึงแสดงค่า)
    answer.addEventListener('input' , checkans) (*input ทุกครั้งที่ข้อมูลเปลี่ยนจะแสดงค่าที่กำหนด)
    answerform (*ครอบภาพใหญ่เพื่อตรวจสอบทั้ง form).addEventListener('submit' , checkans) (*submit จะทำงานต่อเมื่อกดส่งหรือ enter จะส่งไปยังฝั่ง Server)
}
---------------------------------------
DOM Keyboard Event (จับเหตุการณ์ที่เกิดขึ้นจากการกดปุ่มบน Keyboard)
let imageindex = 0;
let imagelink = ['rabbit.jpg','panda.jpg','bird.jpg'];
let image = document.queryselector('.image');
function previmage(){ 
    if (imageindex > 0) (*เงื่อนไขคือเลข imageindex ต้องมากกว่า 0)
    imageindex--;
    image.src = imagelink[imageindex];
}
function nextimage(){
    if(imageindex < imagelink.lenght-1){ (*เงื่อนไขคือเลข index ต้องไม่เกินเลข index ลำดับสุดท้ายที่อยู่ใน imagelink)
        imageindex++;
        image.src = imagelink[imageindex];
    }
}
function keyup(event){
    if (event.key === 'ArrowRight'){ (*กดปุ่มลูกศรซ้ายจะชื่อ ArrowLeft)
        nextimage();
    }
    else if (event.key === 'ArrowLeft'){ (*กดปุ่มลูกศรซ้ายจะชื่อ ArrowLeft)
        previmage();
    }
}
document.addEventListener('keydown'); *เป็น action การกด Keyboard ลงไปอย่างเดียวไม่รวมการปล่อยปุ่มขึ้นมา
document.addEventListener('keyup',keyup); *เป็น action การกด Keyboard ลงไปอย่างเดียวและปล่อยปุ่มขึ้นมา
---------------------------------------
DOM Scroll Event (จับเหตุการณ์ที่เกิดขึ้นจากการเลื่อนขึ้นเลื่อนลงในหน้าเว็บ)
let scrollinfo

window.addEventListener('scroll',() =>){ (*window คือกรอบของ browser)

}) 